name: "Build and deploy"

on:
  push:
    branches:
      - main
      - develop
      - feat/deploy-dev-cd

permissions:
  id-token: write
  packages: write
  contents: write
  pull-requests: write

jobs:
  get-env:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        id: set-env
        run: echo "env=$(if [ ${{ github.ref }} == 'refs/heads/main' ]; then echo 'PROD'; else echo 'DEV_1'; fi)" >> $GITHUB_ENV
    outputs:
      env: ${{ steps.set-env.outputs.env }}
  build:
    runs-on: ubuntu-latest
    needs:
      - get-env
    defaults:
      run:
        working-directory: ./itu-minitwit-golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get short SHA or matching commit hash
        id: get_sha
        run: |
          if [ "${{ needs.get-env.outputs.env }}" == "DEV_1" ]; then
            short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          else
            latest_commit=$(git log -1 --pretty=format:"%H" main)
            short_sha=$(echo $latest_commit | cut -c1-7)
          fi
          echo "short_sha=$short_sha" >> $GITHUB_ENV
      - name: Log in to GitHub Docker registry
        if: ${{ needs.get-env.outputs.env == 'DEV_1' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: ${{ needs.get-env.outputs.env == 'DEV_1' }}
        uses: docker/build-push-action@v6
        with:
          context: ./itu-minitwit-golang
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/itu-minitwit-golang:${{ env.short_sha }}
    outputs:
      short_sha: ${{ env.short_sha }}
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - get-env
    environment: ${{ needs.get-env.outputs.env }}
    env:
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./itu-minitwit-golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init
        working-directory: ./infrastructure/terraform

      - name: Terraform apply
        run: terraform apply -auto-approve -var="do_token=${{ secrets.DIGITAL_OCEAN_API_KEY }}" -var="do_ssh_key_name=${{ secrets.DIGITAL_OCEAN_SSH_KEY_NAME }}"

      - name: Log in to GitHub Docker registry
        if: ${{ needs.get-env.outputs.env == 'DEV_1' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create docker context
        run: docker context create digitalocean --docker "host=ssh://root@${{ secrets.DIGITAL_OCEAN_VM_IP }}"

      - name: Use docker context
        run: docker context use digitalocean

      - name: Deploy
        env:
          DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/itu-minitwit-golang:${{ needs.build.outputs.short_sha }}
        run: docker stack deploy -c docker-compose.yml itu-minitwit
        working-directory: ./itu-minitwit-golang

  create-release:
    runs-on: ubuntu-latest
    needs:
      - deploy
      - get-env
    if: ${{ needs.get-env.outputs.env == 'PROD' }}
    steps:
      - uses: actions/checkout@v3
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Release ${{ github.sha }}



